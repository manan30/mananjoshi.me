---
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import BaseLayout from '../layouts/BaseLayout.astro';

import { getJourneyData } from '../services/contentful/journeyData';

const journeyData = await getJourneyData();
---

<BaseLayout title='Work'>
  <h1 class='mt-6 text-5xl dark:text-primary-light font-semibold -ml-3'>
    Journey
  </h1>
  <ol class='relative border-l border-gray-700 mt-12 sm:mt-8'>
    {
      journeyData.map((journey) => (
        <li class='mb-6 ml-6'>
          <span class='absolute -left-3 flex h-6 w-6 items-center justify-center rounded-full bg-orange-500 ring-8 ring-gray-900'>
            <svg
              xmlns='http://www.w3.org/2000/svg'
              class='h-3 w-3 text-white'
              fill='currentColor'
              viewBox='0 0 24 24'
              fill='none'
              stroke='currentColor'
              stroke-width='2'
              stroke-linecap='round'
              stroke-linejoin='round'
              class='fill-current'
            >
              <rect x='2' y='7' width='20' height='14' rx='2' ry='2' />
              <path d='M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16' />
            </svg>
          </span>
          <div class='flex flex-col space-y-2'>
            <h3 class='flex items-center text-lg font-semibold text-gray-50'>
              {journey.title} @ {journey.company}
            </h3>
            <p class='mb-2 flex items-center space-x-2 text-sm font-normal leading-none text-gray-500'>
              <span>
                {Intl.DateTimeFormat('en-US', {
                  month: 'short',
                  year: '2-digit'
                })
                  .formatToParts(new Date(journey.startDate))
                  .map((p) => {
                    if (p.type === 'literal') {
                      return " '";
                    }
                    return p.value;
                  })
                  .join('')}{' '}
                -{' '}
                {journey.endDate
                  ? Intl.DateTimeFormat('en-US', {
                      month: 'short',
                      year: '2-digit'
                    })
                      .formatToParts(new Date(journey.endDate))
                      .map((p) => {
                        if (p.type === 'literal') {
                          return " '";
                        }
                        return p.value;
                      })
                      .join('')
                  : 'Present'}
              </span>
              <svg height='8' width='8' class='fill-current'>
                <circle cx='4' cy='4' r='2' />
              </svg>
              <span>{journey.location}</span>
            </p>
          </div>
          <span
            class='prose prose-li:p-0 prose-ul:pl-0 prose-li:list-none text-base font-normal text-gray-400'
            set:html={documentToHtmlString(journey.duties)}
          />
        </li>
      ))
    }
  </ol>
</BaseLayout>
